[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cloud-cost-analyzer"
version = "2.0.0"
description = "一个功能强大的多云费用分析工具，支持AWS、阿里云、腾讯云、火山云"
authors = [
    {name = "Cloud Cost Analyzer Team", email = ""}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Systems Administration",
    "Topic :: Office/Business :: Financial",
]

dependencies = [
    "boto3>=1.34.0,<2.0.0",
    "pandas>=2.2.0,<3.0.0",
    "matplotlib>=3.8.0,<4.0.0",
    "seaborn>=0.13.0,<1.0.0",
    "plotly>=5.17.0,<6.0.0",
    "python-dateutil>=2.8.2,<3.0.0",
    "rich>=13.0.0,<14.0.0",
    "colorama>=0.4.6,<1.0.0",
    "requests>=2.31.0,<3.0.0",
    "schedule>=1.2.0,<2.0.0",
    "alibabacloud-bssopenapi20171214>=2.0.0,<3.0.0",
    "tencentcloud-sdk-python>=3.0.0,<4.0.0",
    "volcengine-python-sdk>=1.0.0,<2.0.0",
    "click>=8.0.0,<9.0.0",
    "redis>=4.5.0,<5.0.0",
    "aiohttp>=3.8.0,<4.0.0",
    "pydantic>=2.0.0,<3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pip-tools>=7.0.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "notebook>=6.0.0",
]

[project.scripts]
cloud-cost-analyzer = "cloud_cost_analyzer:main"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\)",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.ruff]
line-length = 100
target-version = "py38"
exclude = [
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable Pyflakes (F), Pycodestyle (E, W), isort (I), Pydocstyle (D), and Security (S) rules by default.
select = ["E", "F", "W", "I", "D", "S"]
ignore = ["E203", "W503", "E501"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "F841"]

max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

